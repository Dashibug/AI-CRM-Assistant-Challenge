# src/app_streamlit.py

import os
import json
import base64
from io import BytesIO
from datetime import datetime

import pandas as pd
import streamlit as st

from reportlab.pdfbase import pdfmetrics
from reportlab.lib.fonts import addMapping
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.rl_config import TTFSearchPath
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

from src.data_loader import fetch_leads, normalize_to_df, create_task
from src.llm_client import LLMClient


# ---------- helpers ----------
def get_kommo_creds():
    base = (st.session_state.get("kommo_base") or os.getenv("KOMMO_BASE_URL", "")).rstrip("/")
    token = st.session_state.get("kommo_token") or os.getenv("KOMMO_ACCESS_TOKEN", "")
    return base, token

def _coerce_leads(raw):
    """–ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç fetch_leads –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π [{...}, ...]. –¢–µ—Ä–ø–∏–º–æ –∫ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º."""
    if raw is None:
        return []
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ JSON-—Å—Ç—Ä–æ–∫–∞
    if isinstance(raw, str):
        try:
            raw = json.loads(raw)
        except Exception:
            # –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            return []
    # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª dict –æ—Ç Kommo —Å _embedded
    if isinstance(raw, dict):
        if "_embedded" in raw and isinstance(raw["_embedded"], dict):
            # Kommo –æ–±—ã—á–Ω–æ –∫–ª–∞–¥—ë—Ç –≤ _embedded['leads']
            for key in ("leads", "items", "data"):
                if key in raw["_embedded"] and isinstance(raw["_embedded"][key], list):
                    return raw["_embedded"][key]
        # –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ {"leads": [...]}
        if "leads" in raw and isinstance(raw["leads"], list):
            return raw["leads"]
        # –∞ –≤–¥—Ä—É–≥ —ç—Ç–æ —É–∂–µ –æ–¥–Ω–∞ —Å–¥–µ–ª–∫–∞-—Å–ª–æ–≤–∞—Ä—å
        if "id" in raw:
            return [raw]
        return []
    # –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫ ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–º —Å–ª–æ–≤–∞—Ä–∏
    if isinstance(raw, list):
        # –±—ã–≤–∞—é—Ç —Å–ø–∏—Å–∫–∏ json-—Å—Ç—Ä–æ–∫ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        if raw and isinstance(raw[0], str):
            out = []
            for x in raw:
                try:
                    out.append(json.loads(x))
                except Exception:
                    pass
            return out
        return raw
    # –¥–µ—Ñ–æ–ª—Ç–Ω–æ ‚Äî –ø—É—Å—Ç–æ
    return []


# ---------------- Kommo-like styles ----------------
KOMMO_CSS = """
<style>
:root {
  --kommo-primary: #6a5cff;
  --kommo-primary-2: #8b7cff;
  --kommo-bg: #f6f7fb;
  --kommo-card: #ffffff;
  --kommo-text: #1f1f2e;
  --kommo-muted: #6b7080;
  --kommo-green: #21c17a;
  --kommo-yellow: #ffcc00;
  --kommo-red: #ff5a5f;
  --kommo-border: #e6e8ef;
  --radius: 18px;
}
section.main > div {background: var(--kommo-bg) !important;}
.kommo-header {
  background: linear-gradient(135deg, var(--kommo-primary), var(--kommo-primary-2));
  color: white; border-radius: 20px; padding: 22px 24px; margin-bottom: 14px;
  box-shadow: 0 10px 30px rgba(106, 92, 255, 0.18);
}
.kommo-title {font-size: 22px; font-weight: 700; margin: 0 0 6px 0;}
.kommo-subtitle {opacity: 0.9; font-size: 14px; margin: 0;}
.stButton > button {
  background: #ffffff; color: #3a2fff; border: 1px solid rgba(255,255,255,0.6);
  padding: 10px 16px; border-radius: 12px; font-weight: 800; box-shadow: 0 8px 22px rgba(31,31,46,0.08);
}
.stButton > button:hover { background: #f7f6ff; }
.stDownloadButton > button {
  background: #fff; color: var(--kommo-text); border: 1px solid var(--kommo-border); border-radius: 12px;
}
.kpi-row {display: grid; grid-template-columns: repeat(3, 1fr); gap: 14px; margin: 10px 0 18px;}
.kpi-card {background: var(--kommo-card); border: 1px solid var(--kommo-border); border-radius: var(--radius);
  padding: 14px 16px; box-shadow: 0 6px 18px rgba(31,31,46,0.04);}
.kpi-label {color: var(--kommo-muted); font-size: 12px; margin-bottom: 6px;}
.kpi-value {color: var(--kommo-text); font-size: 22px; font-weight: 800;}
.lead-card {background: var(--kommo-card); border: 1px solid var(--kommo-border); border-radius: var(--radius);
  padding: 14px 16px; margin-bottom: 10px; box-shadow: 0 8px 22px rgba(31,31,46,0.05);}
.lead-head {display:flex; align-items:center; justify-content:space-between; margin-bottom:8px;}
.lead-name {font-weight: 750; font-size: 16px; color: var(--kommo-text);}
.lead-sec {color: var(--kommo-muted); font-size: 12px;}
.badge {font-size: 12px; font-weight: 800; padding: 4px 10px; border-radius: 999px; border: 1px solid transparent;}
.badge.red { background: #ffe9ea; color: var(--kommo-red); border-color: #ffd1d4; }
.badge.yellow { background: #fff7dd; color: #b58900; border-color: #ffe9a8; }
.badge.green { background: #e9fbf3; color: var(--kommo-green); border-color: #c8f3df; }
.lead-body {color: var(--kommo-text); font-size: 13px; line-height: 1.45;}
.lead-actions {margin-top: 10px; display:flex; gap:10px; flex-wrap: wrap;}
.link-btn {display:inline-block; padding:8px 12px; border-radius: 10px; text-decoration:none; border:1px solid var(--kommo-border); background:#fff; color: var(--kommo-text); font-weight:700;}
</style>
"""

st.set_page_config(page_title="AI CRM Deal Risk Radar ‚Äî LLM", layout="wide")

# ---------------- Header ----------------
st.markdown(KOMMO_CSS, unsafe_allow_html=True)
st.markdown(
    """
    <div class="kommo-header">
      <div class="kommo-title">ü§ñ AI CRM Risk Assistant</div>
      <p class="kommo-subtitle">Kommo ‚Üí LLM-–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ ‚Üí –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è</p>
    </div>
    """,
    unsafe_allow_html=True
)

# --------- LLM client (–≥–ª–æ–±–∞–ª—å–Ω–æ, –æ–¥–∏–Ω —Ä–∞–∑) ----------
if "llm_client" not in st.session_state:
    st.session_state["llm_client"] = LLMClient()
client = st.session_state["llm_client"]

# --- Controls / globals ---
refresh_clicked = st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∏—Å–∫–∏", key="refresh_btn")
SLA_DAYS = int(os.getenv("SLA_DAYS", "2"))

def _task_text(row: pd.Series) -> str:
    return (f"[–°–¥–µ–ª–∫–∞ #{row['deal_id']}] –†–∏—Å–∫: {row['risk_level']}. "
            f"–ü—Ä–∏—á–∏–Ω–∞: {row['risk_reason']}. –î–µ–π—Å—Ç–≤–∏–µ: {row['action']}")

def _deadline_today_18() -> int:
    now = datetime.now()
    return int(datetime(now.year, now.month, now.day, 18, 0, 0).timestamp())

# ---- fonts: –ª–µ–∂–∞—Ç –≤ src/fonts ----
ROOT = os.path.dirname(__file__)
FONTS_DIR = os.path.join(ROOT, "src", "fonts")
TTFSearchPath.append(FONTS_DIR)
FONT_REGULAR = os.path.join(FONTS_DIR, "DejaVuSans.ttf")
FONT_BOLD    = os.path.join(FONTS_DIR, "DejaVuSans-Bold.ttf")

USING_DEJAVU = False
if not os.path.exists(FONT_REGULAR):
    st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à—Ä–∏—Ñ—Ç: {FONT_REGULAR}")
else:
    try:
        pdfmetrics.registerFont(TTFont("DejaVu", FONT_REGULAR))
        if os.path.exists(FONT_BOLD):
            pdfmetrics.registerFont(TTFont("DejaVu-Bold", FONT_BOLD))
            pdfmetrics.registerFont(TTFont("DejaVu-Italic", FONT_REGULAR))
            pdfmetrics.registerFont(TTFont("DejaVu-BoldItalic", FONT_BOLD))
        else:
            pdfmetrics.registerFont(TTFont("DejaVu-Bold", FONT_REGULAR))
            pdfmetrics.registerFont(TTFont("DejaVu-Italic", FONT_REGULAR))
            pdfmetrics.registerFont(TTFont("DejaVu-BoldItalic", FONT_REGULAR))
        addMapping('DejaVu', 0, 0, 'DejaVu')
        addMapping('DejaVu', 0, 1, 'DejaVu-Italic')
        addMapping('DejaVu', 1, 0, 'DejaVu-Bold')
        addMapping('DejaVu', 1, 1, 'DejaVu-BoldItalic')
        USING_DEJAVU = True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")

def get_pdf_download_link(pdf_bytes: bytes, filename: str, link_text: str = "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (PDF)") -> str:
    b64 = base64.b64encode(pdf_bytes).decode("utf-8")
    return (
        f'<a href="data:application/pdf;base64,{b64}" download="{filename}" '
        f'style="display:inline-block;padding:10px 14px;border-radius:10px;'
        f'background:#6a5cff;color:#fff;font-weight:700;text-decoration:none;">{link_text}</a>'
    )

def _digest_pdf(df: pd.DataFrame) -> bytes:
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer, pagesize=A4,
        leftMargin=18*mm, rightMargin=18*mm, topMargin=16*mm, bottomMargin=16*mm,
        title="–û—Ç—á—ë—Ç –ø–æ —Ä–∏—Å–∫–∞–º —Å–¥–µ–ª–æ–∫"
    )

    styles = getSampleStyleSheet()
    base_font = 'DejaVu' if USING_DEJAVU else styles['Normal'].fontName
    bold_font = 'DejaVu-Bold' if USING_DEJAVU else styles['Heading1'].fontName

    styles.add(ParagraphStyle(name="H1", fontName=bold_font, fontSize=18, leading=22, spaceAfter=8))
    styles.add(ParagraphStyle(name="H2", fontName=bold_font, fontSize=13, leading=17, spaceBefore=8, spaceAfter=6))
    styles.add(ParagraphStyle(name="P",  fontName=base_font, fontSize=10.5, leading=14))
    styles.add(ParagraphStyle(name="Small", fontName=base_font, fontSize=9, leading=12, textColor=colors.grey))
    styles.add(ParagraphStyle(name="Wrap", fontName=base_font, fontSize=9.5, leading=12.5, wordWrap='CJK'))

    def P(text, style="P"): return Paragraph(text, styles[style])

    def _fmt_money(x):
        try: return f"{int(x):,}".replace(",", " ")
        except Exception: return str(x)

    red = df[df["risk_level"] == "red"]
    yellow = df[df["risk_level"] == "yellow"]
    total_red = int(red["deal_value"].sum()) if "deal_value" in df.columns else 0

    elems = []
    elems.append(P("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∏—Å–∫–∞–º", "H1"))
    elems.append(P(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: <b>{datetime.now().strftime('%d.%m.%Y %H:%M')}</b>", "Small"))
    elems.append(Spacer(1, 6))

    kpi_data = [
        [P("<b>–ö—Ä–∞—Å–Ω—ã–µ</b>", "Small"), P("<b>–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫ –≤ –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω–µ, ‚ÇΩ</b>", "Small"), P("<b>–ñ—ë–ª—Ç—ã–µ</b>", "Small")],
        [P(str(len(red))), P(_fmt_money(total_red)), P(str(len(yellow)))]
    ]
    kpi_tbl = Table(kpi_data, colWidths=[55*mm, 60*mm, 40*mm])
    kpi_tbl.setStyle(TableStyle([
        ('FONTNAME', (0,0), (-1,-1), base_font),
        ('FONTSIZE', (0,1), (-1,1), 14),
        ('ALIGN', (0,0), (-1,0), 'CENTER'),
        ('ALIGN', (0,1), (-1,1), 'CENTER'),
        ('BACKGROUND', (0,0), (-1,0), colors.whitesmoke),
        ('BOX', (0,0), (-1,-1), 0.5, colors.lightgrey),
        ('INNERGRID', (0,0), (-1,-1), 0.25, colors.lightgrey),
        ('BOTTOMPADDING', (0,0), (-1,0), 6),
        ('TOPPADDING', (0,1), (-1,1), 3),
        ('BOTTOMPADDING', (0,1), (-1,1), 5),
    ]))
    elems.append(kpi_tbl)
    elems.append(Spacer(1, 8))

    # ===== TOP-5 –ö–†–ê–°–ù–´–• =====
    elems.append(P("–¢–û–ü-5 –∫—Ä–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", "H2"))
    top_red = red.sort_values("deal_value", ascending=False).head(5) if "deal_value" in df.columns else red.head(5)

    if top_red.empty:
        elems.append(P("–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", "P"))
    else:
        w_id, w_lead, w_sum, w_last, w_lvl, w_link = 18*mm, 35*mm, 22*mm, 28*mm, 16*mm, 14*mm
        fixed = w_id + w_lead + w_sum + w_last + w_lvl + w_link
        rest = max(20*mm, doc.width - fixed)
        w_reason, w_action = rest * 0.55, rest * 0.45

        header = [P("<b>ID</b>"), P("<b>–õ–∏–¥</b>"), P("<b>–°—É–º–º–∞, ‚ÇΩ</b>"), P("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</b>"),
                  P("<b>–£—Ä–æ–≤–µ–Ω—å</b>"), P("<b>–ü—Ä–∏—á–∏–Ω–∞</b>"), P("<b>–î–µ–π—Å—Ç–≤–∏–µ</b>"), P("<b>Kommo</b>")]
        rows = [header]

        for _, r in top_red.iterrows():
            link = r.get("kommo") or ""
            link_txt = '<u>–û—Ç–∫—Ä.</u>' if link else "‚Äî"
            rows.append([
                P(str(r.get("deal_id","‚Äî"))),
                P(str(r.get("client_name","‚Äî"))),
                P(_fmt_money(r.get("deal_value", 0))),
                P(str(r.get("last_contact_date","‚Äî"))),
                P(str(r.get("risk_level","‚Äî")).upper()),
                Paragraph(str(r.get("risk_reason","‚Äî")), styles["Wrap"]),
                Paragraph(str(r.get("action","‚Äî")), styles["Wrap"]),
                (Paragraph(f'<a href="{link}">{link_txt}</a>', styles["P"]) if link else P("‚Äî"))
            ])

        t = Table(rows, colWidths=[w_id, w_lead, w_sum, w_last, w_lvl, w_reason, w_action, w_link], repeatRows=1)
        t.setStyle(TableStyle([
            ('FONTNAME', (0,0), (-1,-1), base_font),
            ('FONTSIZE', (0,0), (-1,-1), 9),
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('LINEBELOW', (0,0), (-1,0), 0.8, colors.black),
            ('ROWBACKGROUNDS', (0,1), (-1,-1), [colors.whitesmoke, colors.white]),
            ('BOX', (0,0), (-1,-1), 0.5, colors.lightgrey),
            ('INNERGRID', (0,0), (-1,-1), 0.25, colors.lightgrey),
            ('LEFTPADDING', (0,0), (-1,-1), 3),
            ('RIGHTPADDING', (0,0), (-1,-1), 3),
            ('TOPPADDING', (0,0), (-1,-1), 2),
            ('BOTTOMPADDING', (0,0), (-1,-1), 2),
        ]))
        elems.append(t)

    # ===== –ñ–Å–õ–¢–´–ï (—Ç–æ–ø-10) =====
    if not yellow.empty:
        elems.append(Spacer(1, 10))
        elems.append(P("–ñ—ë–ª—Ç—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–ø-10 –ø–æ —Å—É–º–º–µ)", "H2"))

        w_id, w_lead, w_sum, w_last = 18*mm, 35*mm, 22*mm, 28*mm
        fixed = w_id + w_lead + w_sum + w_last
        rest = max(20*mm, doc.width - fixed)
        w_reason, w_action = rest * 0.50, rest * 0.50

        header = [P("<b>ID</b>"), P("<b>–õ–∏–¥</b>"), P("<b>–°—É–º–º–∞, ‚ÇΩ</b>"), P("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</b>"),
                  P("<b>–ü—Ä–∏—á–∏–Ω–∞</b>"), P("<b>–î–µ–π—Å—Ç–≤–∏–µ</b>")]
        rows = [header]

        yv = yellow.sort_values("deal_value", ascending=False).head(10) if "deal_value" in yellow.columns else yellow.head(10)
        for _, r in yv.iterrows():
            rows.append([
                P(str(r.get("deal_id","‚Äî"))),
                P(str(r.get("client_name","‚Äî"))),
                P(_fmt_money(r.get("deal_value", 0))),
                P(str(r.get("last_contact_date","‚Äî"))),
                Paragraph(str(r.get("risk_reason","‚Äî")), styles["Wrap"]),
                Paragraph(str(r.get("action","‚Äî")), styles["Wrap"])
            ])

        yt = Table(rows, colWidths=[w_id, w_lead, w_sum, w_last, w_reason, w_action], repeatRows=1)
        yt.setStyle(TableStyle([
            ('FONTNAME', (0,0), (-1,-1), base_font),
            ('FONTSIZE', (0,0), (-1,-1), 9),
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('LINEBELOW', (0,0), (-1,0), 0.8, colors.black),
            ('ROWBACKGROUNDS', (0,1), (-1,-1), [colors.whitesmoke, colors.white]),
            ('BOX', (0,0), (-1,-1), 0.5, colors.lightgrey),
            ('INNERGRID', (0,0), (-1,-1), 0.25, colors.lightgrey),
            ('LEFTPADDING', (0,0), (-1,-1), 3),
            ('RIGHTPADDING', (0,0), (-1,-1), 3),
            ('TOPPADDING', (0,0), (-1,-1), 2),
            ('BOTTOMPADDING', (0,0), (-1,-1), 2),
        ]))
        elems.append(yt)

    elems.append(Spacer(1, 8))
    elems.append(P("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –º–µ—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
                   "–°—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ PDF-—Ä–∏–¥–µ—Ä–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.", "Small"))

    doc.build(elems)
    pdf = buffer.getvalue()
    buffer.close()
    return pdf


def kommo_url(base_url: str, deal_id: str) -> str:
    return f"{base_url.rstrip('/')}/leads/detail/{deal_id}" if base_url and str(deal_id).strip() else ""


def _days_since_any(s: str | None) -> int:
    if not s: return 9999
    try:
        dt = pd.to_datetime(s, utc=False, errors="coerce")
        if pd.isna(dt): return 9999
        return max(0, int((pd.Timestamp(datetime.now()) - dt).days))
    except Exception:
        return 9999

def _stage_age_days(s: str | None) -> int:
    if not s: return 0
    try:
        dt = pd.to_datetime(s, utc=False, errors="coerce")
        if pd.isna(dt): return 0
        return max(0, int((pd.Timestamp(datetime.now()) - dt).days))
    except Exception:
        return 0


# ---------------- Main flow ----------------
if refresh_clicked:
    BASE, TOKEN = get_kommo_creds()
    if not BASE or not TOKEN:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Kommo –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
    else:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ Kommo..."):
            # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º –∫—Ä–µ–¥—ã
            raw_leads = fetch_leads(BASE, TOKEN, limit=200)
            leads = _coerce_leads(raw_leads)

            # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥—Ö–≤–∞—Ç–æ–º –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            df = normalize_to_df(leads, fetch_notes=True, base_url=BASE, token=TOKEN)

        if df is None or df.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            scores, levels, reasons, actions = [], [], [], []

            with st.spinner("–û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∏—Å–∫–∏ LLM..."):
                for _, row in df.iterrows():
                    feats = {
                        "deal_id": str(row.get("deal_id", "")),
                        "client_name": str(row.get("client_name", "")),
                        "stage": str(row.get("stage", "")),
                        "last_contact_days": _days_since_any(row.get("last_contact_date")),
                        "stage_age_days": _stage_age_days(row.get("last_stage_change_date")),
                        "deal_value": float(row.get("deal_value", 0) or 0),
                        "last_message_text": str(row.get("last_message_text", "")),
                    }
                    res = client.assess_risk_llm(feats)
                    scores.append(res["score"]); levels.append(res["level"])
                    reasons.append(res["reason"]); actions.append(res["action"])

            df_out = df.copy()
            df_out["risk_score"]  = scores
            df_out["risk_level"]  = levels
            df_out["risk_reason"] = reasons
            df_out["action"]      = actions
            df_out["kommo"]       = df_out["deal_id"].apply(lambda x: kommo_url(BASE, x))
            df_out["last_contact_days"] = df_out["last_contact_date"].apply(_days_since_any)

            st.session_state["df_out"] = df_out
            st.session_state.setdefault("drafts", {})
            st.session_state["data_ready"] = True

            try:
                st.session_state["risk_pdf"] = _digest_pdf(df_out)
            except Exception as e:
                st.session_state["risk_pdf"] = None
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å PDF: {e}")


# ---- Sidebar: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kommo ----
with st.sidebar:
    st.subheader("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kommo")
    base_input = st.text_input("–ë–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω", st.session_state.get("kommo_base") or "https://your.kommo.com")
    token_input = st.text_input("Access token", type="password", value=st.session_state.get("kommo_token") or "")
    if st.button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å"):
        try:
            _ = _coerce_leads(fetch_leads(base_input.rstrip("/"), token_input, limit=1))
            st.session_state["kommo_base"] = base_input.rstrip("/")
            st.session_state["kommo_token"] = token_input
            # –æ—á–∏—Å—Ç–∏–º –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            for k in ("df_out", "risk_pdf", "data_ready"):
                st.session_state.pop(k, None)
            st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∏—Å–∫–∏¬ª.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")


# ---- UI –∏–∑ session_state ----
df_out = st.session_state.get("df_out")
if not st.session_state.get("data_ready") or df_out is None or df_out.empty:
    st.info("–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∏—Å–∫–∏¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–¥–µ–ª–∫–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å –∏—Ö LLM-–æ–º.")
else:
    red = df_out[df_out["risk_level"] == "red"]
    yellow = df_out[df_out["risk_level"] == "yellow"]
    kpi_html = f"""
    <div class="kpi-row">
      <div class="kpi-card">
        <div class="kpi-label">–ö—Ä–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏</div>
        <div class="kpi-value">{len(red)}</div>
      </div>
      <div class="kpi-card">
        <div class="kpi-label">C—É–º–º–∞ –∫—Ä–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, ‚ÇΩ</div>
        <div class="kpi-value">{int(red["deal_value"].sum()) if "deal_value" in df_out else 0}</div>
      </div>
      <div class="kpi-card">
        <div class="kpi-label">–ñ—ë–ª—Ç—ã–µ —Å–¥–µ–ª–∫–∏</div>
        <div class="kpi-value">{len(yellow)}</div>
      </div>
    </div>
    """
    st.markdown(kpi_html, unsafe_allow_html=True)

    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    c1, c2 = st.columns(2)
    with c1:
        only_red = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω—ã–µ", value=False, key="flt_only_red")
    with c2:
        top_by_value = st.checkbox("–¢–æ–ø-10 –ø–æ —Å—É–º–º–µ", value=False, key="flt_top_value")

    order = {"red": 0, "yellow": 1, "green": 2}
    view = (df_out.copy()
            .assign(_ord=df_out["risk_level"].map(order))
            .sort_values(["_ord", "risk_score"], ascending=[True, False]))

    if only_red:
        view = view[view["risk_level"] == "red"]
    if top_by_value and "deal_value" in view.columns:
        view = view.sort_values("deal_value", ascending=False).head(10)

    st.subheader("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")


    for _, r in view.iterrows():
        level = r["risk_level"]
        badge = f'<span class="badge {level}">{level.upper()}</span>'

        lc = r.get("last_contact_date") or "‚Äî"
        lcd = int(r.get("last_contact_days") or 0)
        sla_txt = "OK" if lcd <= SLA_DAYS else "SLA: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω"
        reason = r.get("risk_reason") or "‚Äî"
        action = r.get("action") or "‚Äî"
        kommo_link = r.get("kommo") or "#"
        name = r.get("client_name") or f"Lead #{r.get('deal_id', '')}"

        card_html = f"""
        <div class="lead-card">
          <div class="lead-head">
            <div>
              <div class="lead-name">{name}</div>
              <div class="lead-sec">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {lc} ‚Ä¢ {sla_txt}</div>
            </div>
            {badge}
          </div>
          <div class="lead-body">
            <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}<br/>
            <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
          </div>
          <div class="lead-actions">
            <a class="link-btn" href="{kommo_link}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ Kommo</a>
          </div>
        </div>
        """
        st.markdown(card_html, unsafe_allow_html=True)

        colA, colB = st.columns(2)
        with colA:
            if st.button("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Kommo", key=f"task_{r['deal_id']}"):
                try:
                    BASE, TOKEN = get_kommo_creds()
                    create_task(
                        BASE, TOKEN,
                        int(r["deal_id"]),
                        _task_text(r),
                        _deadline_today_18(),
                        responsible_user_id=int(r.get("owner") or 0) or None
                    )
                    st.success("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ")
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {e}")

        with colB:
            with st.expander("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ"):
                deal_key = str(r["deal_id"])
                existing = st.session_state.setdefault("drafts", {}).get(deal_key, "")
                st.text_area("–ü–∏—Å—å–º–æ", value=existing, height=150, key=f"txt_{deal_key}")
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", key=f"draft_{deal_key}"):
                    try:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ..."):
                            draft = client.draft_followup(r["client_name"], reason, r.get("last_message_text", ""))
                        st.session_state["drafts"][deal_key] = draft
                        try:
                            st.rerun()
                        except Exception:
                            st.experimental_rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")

    # --- –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (PDF) ‚Äî –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.markdown("---")
    pdf_bytes = st.session_state.get("risk_pdf")
    if pdf_bytes:
        st.markdown(get_pdf_download_link(pdf_bytes, "risk_report.pdf", "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (PDF)"),
                    unsafe_allow_html=True)
    else:
        st.info("–û—Ç—á—ë—Ç (PDF) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ–±–Ω–æ–≤–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
